[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EODH Training Materials",
    "section": "",
    "text": "Welcome\nThis site is in heavy development.\nWelcome to the eodh-training repository! This repository aims to provide a live set of documents to demonstrate how to use the EODH (Earth Observation Data Hub) Python API client and QGIS plugin. Other training materials may be added to this repository in future.\nWhether you’re a user looking to explore the project or a developer wanting to contribute, you’ll find all the information you need here.\n\n\nContent\nAdd - links to notebooks and resources\n\n\nAdditional Support\nWe have set up an accessible Discussion Group as a location that users can interact with other users, as well as the Hub owners and developers. Please use this resource to build a vibrant community around the EODH platform.\nIf you require specific development information on the API client then please check out the ReadTheDocs page for the client.\n\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "presentations/DEFRA/202409_Defra.html",
    "href": "presentations/DEFRA/202409_Defra.html",
    "title": "Demonstration for DEFRA",
    "section": "",
    "text": "Add EODH, CEDA and Oxidian logos! (TODO)\nDescription & purpose: This Notebook is designed to showcase the initial functionality of the Earth Observation Data Hub. It provides a snapshot of the Hub, the pyeodh API client and the various datasets as of September 2024. The user has a test site (Thetford) and would like to understand more about the satellite data available for that area. The user is also interested in obtaining a cloud free dataset and creating a data cube. The Notebook is designed in such a way that it can be run on the EODH AppHub (Notebook Service) or from a local environment.\nAuthor(s): Alastair Graham, Dusan Figala, Phil Kershaw\nDate created: 2024-09-05\nDate last modified: 2024-09-18\nLicence: This notebook is licensed under Creative Commons Attribution-ShareAlike 4.0 International. The code is released using the BSD-2-Clause license.\nCopyright (c) , All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "presentations/DEFRA/202409_Defra.html#its-data-discovery",
    "href": "presentations/DEFRA/202409_Defra.html#its-data-discovery",
    "title": "Demonstration for DEFRA",
    "section": "1) it’s data discovery",
    "text": "1) it’s data discovery\npyeodh exposes the Hub’s API endpoints to Python users\n\n# Imports\nimport pyeodh\n\n\n# Connect to the Hub\nclient = pyeodh.Client().get_catalog_service()\n\n# Print a list of the collections held in the Resource Catalogue (their id and description)\nfor collect in client.get_collections():\n    print(f\"{collect.id}: {collect.description}\")\n\ncmip6: CMIP6\ncordex: CORDEX\nukcp: UKCP\nairbus_sar_data: The German TerraSAR-X / TanDEM-X satellite formation and the Spanish PAZ satellite (managed by Hisdesat Servicios Estratégicos S.A.) are being operated in the same orbit tube and feature identical ground swaths and imaging modes - allowing Airbus and Hisdesat to establish a unique commercial Radar Constellation. The satellites carry a high frequency X-band Synthetic Aperture Radar (SAR) sensor in order to acquire datasets ranging from very high-resolution imagery to wide area coverage.\nairbus_data_example: Airbus data\nairbus_data_example: Airbus data\nsentinel2_ard: sentinel 2 ARD\nsentinel1: Sentinel 1\nnaip: The [National Agriculture Imagery Program](https://www.fsa.usda.gov/programs-and-services/aerial-photography/imagery-programs/naip-imagery/) (NAIP) provides U.S.-wide, high-resolution aerial imagery, with four spectral bands (R, G, B, IR).  NAIP is administered by the [Aerial Field Photography Office](https://www.fsa.usda.gov/programs-and-services/aerial-photography/) (AFPO) within the [US Department of Agriculture](https://www.usda.gov/) (USDA).  Data are captured at least once every three years for each state.  This dataset represents NAIP data from 2010-present, in [cloud-optimized GeoTIFF](https://www.cogeo.org/) format.\n\ncop-dem-glo-90: The Copernicus DEM is a Digital Surface Model (DSM) which represents the surface of the Earth including buildings, infrastructure and vegetation. GLO-90 provides worldwide coverage at 90 meters.\n\n\n\n# Find some commercial data\n\n\n# Find some open data\n\n\nit’s mass compute what are workflows There’s also a QGIS plugin\n\n\n# connect to the Workflow Runner\n\n\n# Choose and parameterise a workflow\n\n\n# Run the workflow\n\n\n# Find the outputs\n\n\nit’s data analysis Notebook service can be used with pyeodh and other libraries installed using pip to analyse data and outputs\n\n\n# Create a data cube?\n\nFollowing https://odc-stac.readthedocs.io/en/latest/notebooks/stac-load-e84-aws.html"
  },
  {
    "objectID": "api-client/2_ResourceCatalog.html",
    "href": "api-client/2_ResourceCatalog.html",
    "title": "Resource Catalog",
    "section": "",
    "text": "This notebook demostrates usage of the EODH resource catalog API using pyeodh\n\n\n\na clear description of purpose,\nintended audience and/or use case\nlinkages between notebooks and other training resources (if required)\n\n\n\n\n\nTechnical dependencies,\nPlatform and Service Dependencies,\nPython Language versions,\nlibraries, additional scripts and files.\n\n\n\n\n“When Jupyter notebooks are used in an educational context, they should not only be conceptualized to teach a specific topic but should also set a good example by following and implementing best practices for scientific computing”\n\nNeed in-order execution of notebook cells\nGood-quality code\nNo code duplication\nImports at the beginning of a notebook\nConsistent code style and formatting\nMeaningful names for variables\nLicence for code and training resources\n\nDescription & purpose:\nAuthor(s):\nDate created:\nDate last modified:\nLicence: This notebook is released under Creative Commons …. The code is released using …\nFirst we need to create an instance of the Client, which is our entrypoint to EODH APIs.\n\nimport pyeodh\n\nclient = pyeodh.Client(base_url=\"https://test.eodatahub.org.uk\") # Optionally specify a different server\n\nFetch the resource catalog object.\nSome text\n\n# GET /stac-fastapi/catalogs\nservice = client.get_catalog_service()\n#catalogs = service.get_catalogs()\n#ceda_cat = service.get_catalog(\"supported-datasets/ceda-stac-fastapi\")\n\nAll attributes are mapped to properties, e.g.\n\nprint(\"id: \", rc.id)\nprint(\"title: \", rc.title)\nprint(\"description: \", rc.description)\n\nAPI endpoints are wrapped in methods and are structured into classes following the same logic as the API. E.g. to fetch a collection item, I first need to get the collection from the resource catalog.\n\n# GET /stac-fastapi/collections/{collection_id}/items/{item_id}\ncmip6 = rc.get_collection(\"cmip6\")\nitem = cmip6.get_item(\"CMIP6.ScenarioMIP.THU.CIESM.ssp585.r1i1p1f1.Amon.rsus.gr.v20200806\")\nprint(item.id)\n\nSome API responses are paginated (e.g. collection items), and you can simply iterate over them.\n\n# GET /stac-fastapi/collections/cmip6/items\nitems = cmip6.get_items()\nfor item in items:\n    print(item.id)\n\nAttempting to create a collection with id that already exists will result in 409 error code. To see the example in action delete the test collection first by running the cell below.\nDelete a colletion\n\nrc.get_collection(\"test1\").delete()\n\nCreate new collection example\n\ntest1 = rc.create_collection(id=\"test1\", title=\"Test\", description=\"Test collection\")\nprint(test1.description)\n\nUpdate a collection\n\ntest1.update(description=\"Different description\")\nprint(test1.description)\n\nCreate an item\n\ntestitem1 = test1.create_item(id=\"test1.testitem1\")\nprint(f\"Created {testitem1.id} in collection {testitem1.collection}\")\n\nUpdate an item\n\ntestitem1.update(properties={\"foo\": \"bar\"})\nprint(testitem1.properties)\n\nDelete an item\n\ntestitem1.delete()\n\nFind out more about the Resource Catalog\n\nprint(f\"Livecheck: PING-{rc.ping()}\")\nprint(\"\\nAPI conforms to:\", *rc.get_conformance(), sep=\"\\n\")\n\nSearch the Catalog\n\nfor result in rc.search(collections=['cmip6']):\n    print(result.id)",
    "crumbs": [
      "API Client (pyeodh)",
      "Searching the Resource Catalogue"
    ]
  },
  {
    "objectID": "api-client/2_ResourceCatalog.html#ensure",
    "href": "api-client/2_ResourceCatalog.html#ensure",
    "title": "Resource Catalog",
    "section": "",
    "text": "a clear description of purpose,\nintended audience and/or use case\nlinkages between notebooks and other training resources (if required)",
    "crumbs": [
      "API Client (pyeodh)",
      "Searching the Resource Catalogue"
    ]
  },
  {
    "objectID": "api-client/2_ResourceCatalog.html#record",
    "href": "api-client/2_ResourceCatalog.html#record",
    "title": "Resource Catalog",
    "section": "",
    "text": "Technical dependencies,\nPlatform and Service Dependencies,\nPython Language versions,\nlibraries, additional scripts and files.",
    "crumbs": [
      "API Client (pyeodh)",
      "Searching the Resource Catalogue"
    ]
  },
  {
    "objectID": "api-client/2_ResourceCatalog.html#remember",
    "href": "api-client/2_ResourceCatalog.html#remember",
    "title": "Resource Catalog",
    "section": "",
    "text": "“When Jupyter notebooks are used in an educational context, they should not only be conceptualized to teach a specific topic but should also set a good example by following and implementing best practices for scientific computing”\n\nNeed in-order execution of notebook cells\nGood-quality code\nNo code duplication\nImports at the beginning of a notebook\nConsistent code style and formatting\nMeaningful names for variables\nLicence for code and training resources\n\nDescription & purpose:\nAuthor(s):\nDate created:\nDate last modified:\nLicence: This notebook is released under Creative Commons …. The code is released using …\nFirst we need to create an instance of the Client, which is our entrypoint to EODH APIs.\n\nimport pyeodh\n\nclient = pyeodh.Client(base_url=\"https://test.eodatahub.org.uk\") # Optionally specify a different server\n\nFetch the resource catalog object.\nSome text\n\n# GET /stac-fastapi/catalogs\nservice = client.get_catalog_service()\n#catalogs = service.get_catalogs()\n#ceda_cat = service.get_catalog(\"supported-datasets/ceda-stac-fastapi\")\n\nAll attributes are mapped to properties, e.g.\n\nprint(\"id: \", rc.id)\nprint(\"title: \", rc.title)\nprint(\"description: \", rc.description)\n\nAPI endpoints are wrapped in methods and are structured into classes following the same logic as the API. E.g. to fetch a collection item, I first need to get the collection from the resource catalog.\n\n# GET /stac-fastapi/collections/{collection_id}/items/{item_id}\ncmip6 = rc.get_collection(\"cmip6\")\nitem = cmip6.get_item(\"CMIP6.ScenarioMIP.THU.CIESM.ssp585.r1i1p1f1.Amon.rsus.gr.v20200806\")\nprint(item.id)\n\nSome API responses are paginated (e.g. collection items), and you can simply iterate over them.\n\n# GET /stac-fastapi/collections/cmip6/items\nitems = cmip6.get_items()\nfor item in items:\n    print(item.id)\n\nAttempting to create a collection with id that already exists will result in 409 error code. To see the example in action delete the test collection first by running the cell below.\nDelete a colletion\n\nrc.get_collection(\"test1\").delete()\n\nCreate new collection example\n\ntest1 = rc.create_collection(id=\"test1\", title=\"Test\", description=\"Test collection\")\nprint(test1.description)\n\nUpdate a collection\n\ntest1.update(description=\"Different description\")\nprint(test1.description)\n\nCreate an item\n\ntestitem1 = test1.create_item(id=\"test1.testitem1\")\nprint(f\"Created {testitem1.id} in collection {testitem1.collection}\")\n\nUpdate an item\n\ntestitem1.update(properties={\"foo\": \"bar\"})\nprint(testitem1.properties)\n\nDelete an item\n\ntestitem1.delete()\n\nFind out more about the Resource Catalog\n\nprint(f\"Livecheck: PING-{rc.ping()}\")\nprint(\"\\nAPI conforms to:\", *rc.get_conformance(), sep=\"\\n\")\n\nSearch the Catalog\n\nfor result in rc.search(collections=['cmip6']):\n    print(result.id)",
    "crumbs": [
      "API Client (pyeodh)",
      "Searching the Resource Catalogue"
    ]
  },
  {
    "objectID": "website/about.html",
    "href": "website/about.html",
    "title": "About",
    "section": "",
    "text": "What is EODH\n\n\nResources on this website",
    "crumbs": [
      "About"
    ]
  }
]