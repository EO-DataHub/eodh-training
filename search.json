[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EODH Training Materials",
    "section": "",
    "text": "Welcome\nThis site is in heavy development.\nWelcome to the eodh-training repository! This repository aims to provide a live set of documents to demonstrate how to use the EODH (Earth Observation Data Hub) and associated tools such as the pyeodh Python API client, workflow generator and QGIS plugin. Other training materials may be added to this repository in future.\nWhether you’re a user looking to explore the project or a developer wanting to contribute, you’ll find all the information you need here.\n\n\nContent\nYou’ll be able to find the content you require by navidating through this website using the sidebar to the left.\n\n\nAdditional Support\nWe have set up an accessible Discussion Group as a location that users can interact with other users, as well as the Hub owners and developers. Please use this resource to build a vibrant community around the EODH platform. It is also accessible via the GitHub icon at the top of every page.\nIf you require specific development information on the API client then please check out the ReadTheDocs page for the client.\n\nThis website is made using Quarto.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "workflows/1_workflows.html",
    "href": "workflows/1_workflows.html",
    "title": "What is a Workflow",
    "section": "",
    "text": "What is CWL?\n\n\nWhat is the Workflow Runner?\n\n\nWhat is the Workflow generator?",
    "crumbs": [
      "Workflows",
      "Workflow Introduction"
    ]
  },
  {
    "objectID": "api-client/planet-stac-proxy.html",
    "href": "api-client/planet-stac-proxy.html",
    "title": "Planet STAC Example",
    "section": "",
    "text": "Demo of retrieving data from Planet via their STAC proxy api using the PySTAC Client. Requires an api-key saved in as .planet.json which has the content {\"key\": \"API_KEY\"}.\n\nimport base64\nfrom pystac_client import Client\nimport requests\nfrom shapely import Point\nimport planet\nfrom IPython.display import Image\n\napi_key = planet.Auth.from_file().value\n\nuserpass = f\"{api_key}:\"\n\nheaders = {\n    \"Authorization\": f\"Basic {base64.b64encode(userpass.encode()).decode()}\"\n}\n\n\nclient = Client.open(\n    url=\"https://api.planet.com/x/data/\",\n    headers=headers\n)\n\nitem_search = client.search(\n    collections=['PSScene'],\n    datetime='2024-06-01/2024-08-01',\n    intersects=Point(-111, 45.68),\n    filter={\n        \"op\": \"&gt;=\",\n        \"args\": [{\"property\": \"clear_percent\"}, 50]\n    }\n)\n\nitem = next(item_search.items())\nthumbnail = requests.get(item.assets[\"thumbnail\"].href, headers=headers)\nImage(data=thumbnail.content)\n\n\n\n\n\n\n\n\n\nimport pyeodh\nimport base64\nfrom io import BytesIO\nfrom pystac_client import Client\nimport requests\nfrom shapely import Point\nimport planet\nfrom IPython.display import Image\n\napi_key = planet.Auth.from_file().value\n\nuserpass = f\"{api_key}:\"\n\nheaders = {\n    \"Authorization\": f\"Basic {base64.b64encode(userpass.encode()).decode()}\"\n}\n\nclient = pyeodh.Client(username=api_key).get_catalog_service()\nitem_search = client.search(\n    collections=['PSScene'],\n    datetime='2024-06-01/2024-08-01',\n    intersects=Point(-111, 45.68),\n    filter={\n        \"op\": \"&gt;=\",\n        \"args\": [{\"property\": \"clear_percent\"}, 50]\n    }\n)\n\nitem = item_search[0]\nthumbnail = requests.get(item.assets[\"thumbnail\"].href, headers=headers)\nImage(data=thumbnail.content)\n\n\n---------------------------------------------------------------------------\nHTTPError                                 Traceback (most recent call last)\nCell In[10], line 29\n     18 client = pyeodh.Client(username=api_key).get_catalog_service()\n     19 item_search = client.search(\n     20     collections=['PSScene'],\n     21     datetime='2024-06-01/2024-08-01',\n   (...)\n     26     }\n     27 )\n---&gt; 29 item = item_search[0]\n     30 thumbnail = requests.get(item.assets[\"thumbnail\"].href, headers=headers)\n     31 Image(data=thumbnail.content)\n\nFile ~/.local/lib/python3.11/site-packages/pyeodh/pagination.py:82, in PaginatedList.__getitem__(self, index)\n     80 def __getitem__(self, index: int) -&gt; T:\n     81     assert isinstance(index, int)\n---&gt; 82     self._fetch_to_index(index)\n     83     return self._elements[index]\n\nFile ~/.local/lib/python3.11/site-packages/pyeodh/pagination.py:87, in PaginatedList._fetch_to_index(self, index)\n     85 def _fetch_to_index(self, index: int) -&gt; None:\n     86     while len(self._elements) &lt;= index and self._has_next():\n---&gt; 87         new_elements = self._fetch_next()\n     88         self._elements += new_elements\n\nFile ~/.local/lib/python3.11/site-packages/pyeodh/pagination.py:96, in PaginatedList._fetch_next(self)\n     94 if not self._next_url:\n     95     raise RuntimeError(\"Next url not specified!\")\n---&gt; 96 headers, resp_data = self._client._request_json(\n     97     self._method,\n     98     self._next_url,\n     99     headers=self._headers,\n    100     params=self._params,\n    101     data=self._data,\n    102 )\n    103 next_link = next(\n    104     filter(lambda ln: ln.get(\"rel\") == \"next\", resp_data.get(\"links\", {})), {}\n    105 )\n    106 self._next_url = next_link.get(\"href\")\n\nFile ~/.local/lib/python3.11/site-packages/pyeodh/client.py:102, in Client._request_json(self, method, url, headers, params, data, encode)\n     93 def _request_json(\n     94     self,\n     95     method: RequestMethod,\n   (...)\n    100     encode: Callable[[Any], tuple[str, Any]] = _encode_json,\n    101 ) -&gt; tuple[Headers, Any]:\n--&gt; 102     status, resp_headers, resp_data = self._request_json_raw(\n    103         method, url, headers, params, data, encode\n    104     )\n    106     if not len(resp_data):\n    107         return resp_headers, None\n\nFile ~/.local/lib/python3.11/site-packages/pyeodh/client.py:89, in Client._request_json_raw(self, method, url, headers, params, data, encode)\n     82 logger.debug(\n     83     f\"Received response {response.status_code}\\nheaders: {response.headers}\"\n     84     f\"\\ncontent: {response.text}\"\n     85 )\n     86 # TODO consider moving this to _requst_json() and raise own exceptions\n     87 # so that we can user _raw in e.g. delete methods where we expect a 409 and\n     88 # want to recover\n---&gt; 89 response.raise_for_status()\n     91 return response.status_code, response.headers, response.text\n\nFile /opt/jaspy/lib/python3.11/site-packages/requests/models.py:1024, in Response.raise_for_status(self)\n   1019     http_error_msg = (\n   1020         f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n   1021     )\n   1023 if http_error_msg:\n-&gt; 1024     raise HTTPError(http_error_msg, response=self)\n\nHTTPError: 400 Client Error: Bad Request for url: https://test.eodatahub.org.uk/api/catalogue/stac/search"
  },
  {
    "objectID": "api-client/2_ResourceCatalog.html",
    "href": "api-client/2_ResourceCatalog.html",
    "title": "Resource Catalog",
    "section": "",
    "text": "This notebook demostrates usage of the EODH resource catalog API using pyeodh\n\n\n\na clear description of purpose,\nintended audience and/or use case\nlinkages between notebooks and other training resources (if required)\n\n\n\n\n\nTechnical dependencies,\nPlatform and Service Dependencies,\nPython Language versions,\nlibraries, additional scripts and files.\n\n\n\n\n“When Jupyter notebooks are used in an educational context, they should not only be conceptualized to teach a specific topic but should also set a good example by following and implementing best practices for scientific computing”\n\nNeed in-order execution of notebook cells\nGood-quality code\nNo code duplication\nImports at the beginning of a notebook\nConsistent code style and formatting\nMeaningful names for variables\nLicence for code and training resources\n\n\nDescription & purpose:\nAuthor(s):\nDate created:\nDate last modified:\nLicence: This notebook is released under Creative Commons …. The code is released using …\nFirst we need to create an instance of the Client, which is our entrypoint to EODH APIs.\n\nimport pyeodh\n\nclient = pyeodh.Client(base_url=\"https://test.eodatahub.org.uk\") # Optionally specify a different server\n\nFetch the resource catalog object.\n\n# GET /stac-fastapi/catalogs\nservice = client.get_catalog_service()\ncatalogs = service.get_catalogs()\nceda_cat = service.get_catalog(\"supported-datasets/ceda-stac-fastapi\")\n\nAll attributes are mapped to properties, e.g.\n\nprint(\"id: \", catalogs.id)\n#print(\"title: \", rc.title)\n#print(\"description: \", rc.description)\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 print(\"id: \", catalogs.id)\n      2 #print(\"title: \", rc.title)\n      3 #print(\"description: \", rc.description)\n\nAttributeError: 'list' object has no attribute 'id'\n\n\n\nAPI endpoints are wrapped in methods and are structured into classes following the same logic as the API. E.g. to fetch a collection item, I first need to get the collection from the resource catalog.\n\n# GET /stac-fastapi/collections/{collection_id}/items/{item_id}\ncmip6 = rc.get_collection(\"cmip6\")\nitem = cmip6.get_item(\"CMIP6.ScenarioMIP.THU.CIESM.ssp585.r1i1p1f1.Amon.rsus.gr.v20200806\")\nprint(item.id)\n\nSome API responses are paginated (e.g. collection items), and you can simply iterate over them.\n\n# GET /stac-fastapi/collections/cmip6/items\nitems = cmip6.get_items()\nfor item in items:\n    print(item.id)\n\nAttempting to create a collection with id that already exists will result in 409 error code. To see the example in action delete the test collection first by running the cell below.\nDelete a colletion\n\nrc.get_collection(\"test1\").delete()\n\nCreate new collection example\n\ntest1 = rc.create_collection(id=\"test1\", title=\"Test\", description=\"Test collection\")\nprint(test1.description)\n\nUpdate a collection\n\ntest1.update(description=\"Different description\")\nprint(test1.description)\n\nCreate an item\n\ntestitem1 = test1.create_item(id=\"test1.testitem1\")\nprint(f\"Created {testitem1.id} in collection {testitem1.collection}\")\n\nUpdate an item\n\ntestitem1.update(properties={\"foo\": \"bar\"})\nprint(testitem1.properties)\n\nDelete an item\n\ntestitem1.delete()\n\nFind out more about the Resource Catalog\n\nprint(f\"Livecheck: PING-{rc.ping()}\")\nprint(\"\\nAPI conforms to:\", *rc.get_conformance(), sep=\"\\n\")\n\nSearch the Catalog\n\nfor result in rc.search(collections=['cmip6']):\n    print(result.id)",
    "crumbs": [
      "API Client (pyeodh)",
      "Searching the Resource Catalogue"
    ]
  },
  {
    "objectID": "api-client/2_ResourceCatalog.html#remove-in-production-release",
    "href": "api-client/2_ResourceCatalog.html#remove-in-production-release",
    "title": "Resource Catalog",
    "section": "",
    "text": "This notebook demostrates usage of the EODH resource catalog API using pyeodh\n\n\n\na clear description of purpose,\nintended audience and/or use case\nlinkages between notebooks and other training resources (if required)\n\n\n\n\n\nTechnical dependencies,\nPlatform and Service Dependencies,\nPython Language versions,\nlibraries, additional scripts and files.\n\n\n\n\n“When Jupyter notebooks are used in an educational context, they should not only be conceptualized to teach a specific topic but should also set a good example by following and implementing best practices for scientific computing”\n\nNeed in-order execution of notebook cells\nGood-quality code\nNo code duplication\nImports at the beginning of a notebook\nConsistent code style and formatting\nMeaningful names for variables\nLicence for code and training resources\n\n\nDescription & purpose:\nAuthor(s):\nDate created:\nDate last modified:\nLicence: This notebook is released under Creative Commons …. The code is released using …\nFirst we need to create an instance of the Client, which is our entrypoint to EODH APIs.\n\nimport pyeodh\n\nclient = pyeodh.Client(base_url=\"https://test.eodatahub.org.uk\") # Optionally specify a different server\n\nFetch the resource catalog object.\n\n# GET /stac-fastapi/catalogs\nservice = client.get_catalog_service()\ncatalogs = service.get_catalogs()\nceda_cat = service.get_catalog(\"supported-datasets/ceda-stac-fastapi\")\n\nAll attributes are mapped to properties, e.g.\n\nprint(\"id: \", catalogs.id)\n#print(\"title: \", rc.title)\n#print(\"description: \", rc.description)\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 print(\"id: \", catalogs.id)\n      2 #print(\"title: \", rc.title)\n      3 #print(\"description: \", rc.description)\n\nAttributeError: 'list' object has no attribute 'id'\n\n\n\nAPI endpoints are wrapped in methods and are structured into classes following the same logic as the API. E.g. to fetch a collection item, I first need to get the collection from the resource catalog.\n\n# GET /stac-fastapi/collections/{collection_id}/items/{item_id}\ncmip6 = rc.get_collection(\"cmip6\")\nitem = cmip6.get_item(\"CMIP6.ScenarioMIP.THU.CIESM.ssp585.r1i1p1f1.Amon.rsus.gr.v20200806\")\nprint(item.id)\n\nSome API responses are paginated (e.g. collection items), and you can simply iterate over them.\n\n# GET /stac-fastapi/collections/cmip6/items\nitems = cmip6.get_items()\nfor item in items:\n    print(item.id)\n\nAttempting to create a collection with id that already exists will result in 409 error code. To see the example in action delete the test collection first by running the cell below.\nDelete a colletion\n\nrc.get_collection(\"test1\").delete()\n\nCreate new collection example\n\ntest1 = rc.create_collection(id=\"test1\", title=\"Test\", description=\"Test collection\")\nprint(test1.description)\n\nUpdate a collection\n\ntest1.update(description=\"Different description\")\nprint(test1.description)\n\nCreate an item\n\ntestitem1 = test1.create_item(id=\"test1.testitem1\")\nprint(f\"Created {testitem1.id} in collection {testitem1.collection}\")\n\nUpdate an item\n\ntestitem1.update(properties={\"foo\": \"bar\"})\nprint(testitem1.properties)\n\nDelete an item\n\ntestitem1.delete()\n\nFind out more about the Resource Catalog\n\nprint(f\"Livecheck: PING-{rc.ping()}\")\nprint(\"\\nAPI conforms to:\", *rc.get_conformance(), sep=\"\\n\")\n\nSearch the Catalog\n\nfor result in rc.search(collections=['cmip6']):\n    print(result.id)",
    "crumbs": [
      "API Client (pyeodh)",
      "Searching the Resource Catalogue"
    ]
  },
  {
    "objectID": "presentations/DEFRA/202409_Defra.html",
    "href": "presentations/DEFRA/202409_Defra.html",
    "title": "Demonstration for DEFRA",
    "section": "",
    "text": "Add EODH, CEDA and Oxidian logos! (TODO)\nDescription & purpose: This Notebook is designed to showcase the initial functionality of the Earth Observation Data Hub. It provides a snapshot of the Hub, the pyeodh API client and the various datasets as of September 2024. The user has a test site (Thetford) and would like to understand more about the satellite data available for that area. The user is also interested in obtaining a cloud free dataset and creating a data cube. The Notebook is designed in such a way that it can be run on the EODH AppHub (Notebook Service) or from a local environment.\nAuthor(s): Alastair Graham, Dusan Figala, Phil Kershaw\nDate created: 2024-09-05\nDate last modified: 2024-09-18\nLicence: This notebook is licensed under Creative Commons Attribution-ShareAlike 4.0 International. The code is released using the BSD-2-Clause license.\n Copyright (c) , All rights reserved.\n Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nWhat is the EODH?\nThe Earth Observation Data Hub is:\n“A UK Pathfinder project delivering access to Earth Observation (EO) data for effective decisionmaking across government, business and academia. The Earth Observation DataHub (EODH) brings together an expert project delivery team and industrial partners in an ambitious project… Users of the Hub will be able to explore areas of interest in the UK and across the globe… It will also enable selected users to support their own analyses, services and tools using the Hub’s workflow and compute environments.”\nMore details can be found online at https://eodatahub.org.uk/\nComponents of the Hub include: * A Resource Catalogue - a STAC compliant, (TO DO) * A Workflow Runner * A Web Presence * An App Hub\n\nPresentation set up\nThe following cell only needs to be run on the EODH AppHub. If you have a local Python environment running install the required packages as you would normally.\n\n# If needed you can install a package in the current AppHub Jupyter environment using pip\n# For instance, we will need the following libraries\nimport sys\n!{sys.executable} -m pip install --upgrade pyeodh pandas matplotlib numpy pillow folium\n\n\n\n\nEODH: it’s data discovery\npyeodh exposes the Hub’s API endpoints to Python users\n\n# Imports\nimport pyeodh\n\nimport geopandas as gpd\nimport folium\nimport requests\nfrom requests import HTTPError\nimport os\nfrom pprint import pp\n\n\n# Connect to the Hub\nclient = pyeodh.Client().get_catalog_service()\n\n# Print a list of the collections held in the Resource Catalogue (their id and description)\nfor collect in client.get_collections():\n    print(f\"{collect.id}: {collect.description}\")\n\ncmip6: CMIP6\ncordex: CORDEX\nukcp: UKCP\nairbus_sar_data: The German TerraSAR-X / TanDEM-X satellite formation and the Spanish PAZ satellite (managed by Hisdesat Servicios Estratégicos S.A.) are being operated in the same orbit tube and feature identical ground swaths and imaging modes - allowing Airbus and Hisdesat to establish a unique commercial Radar Constellation. The satellites carry a high frequency X-band Synthetic Aperture Radar (SAR) sensor in order to acquire datasets ranging from very high-resolution imagery to wide area coverage.\nairbus_data_example: Airbus data\nsentinel2_ard: sentinel 2 ARD\nsentinel1: Sentinel 1\nsentinel1: Sentinel 1\nnaip: The [National Agriculture Imagery Program](https://www.fsa.usda.gov/programs-and-services/aerial-photography/imagery-programs/naip-imagery/) (NAIP) provides U.S.-wide, high-resolution aerial imagery, with four spectral bands (R, G, B, IR).  NAIP is administered by the [Aerial Field Photography Office](https://www.fsa.usda.gov/programs-and-services/aerial-photography/) (AFPO) within the [US Department of Agriculture](https://www.usda.gov/) (USDA).  Data are captured at least once every three years for each state.  This dataset represents NAIP data from 2010-present, in [cloud-optimized GeoTIFF](https://www.cogeo.org/) format.\n\ncop-dem-glo-90: The Copernicus DEM is a Digital Surface Model (DSM) which represents the surface of the Earth including buildings, infrastructure and vegetation. GLO-90 provides worldwide coverage at 90 meters.\n\n\n\n# Where are we looking at\ngdf = gpd.read_file(\"thetford_aoi.geojson\")\ngdf.explore()\n\n\n# Find some commercial data\n\n\n# Find some open data\nsentinel2_ard = client.get_catalog(\"supported-datasets/ceda-stac-fastapi\").get_collection('sentinel2_ard')\nsentinel2_ard.get_items()\nfor item in sentinel2_ard.get_items():\n    print(item.id)\n\nprint('TEMPORAL EXTENT: ', [str(d) for d in sentinel2_ard.extent.temporal.intervals[0]])\n\nneodc.sentinel_ard.data.sentinel_2.2023.11.21.S2B_20231121_latn536lonw0052_T30UUE_ORB123_20231121122846_utm30n_TM65\nneodc.sentinel_ard.data.sentinel_2.2023.11.20.S2A_20231120_latn563lonw0037_T30VVH_ORB037_20231120132420_utm30n_osgb\nneodc.sentinel_ard.data.sentinel_2.2023.11.20.S2A_20231120_latn546lonw0037_T30UVF_ORB037_20231120132420_utm30n_osgb\nneodc.sentinel_ard.data.sentinel_2.2023.11.20.S2A_20231120_latn536lonw0007_T30UXE_ORB037_20231120132420_utm30n_osgb\nneodc.sentinel_ard.data.sentinel_2.2023.11.20.S2A_20231120_latn528lonw0022_T30UWD_ORB037_20231120132420_utm30n_osgb\nneodc.sentinel_ard.data.sentinel_2.2023.11.20.S2A_20231120_latn527lonw0007_T30UXD_ORB037_20231120132420_utm30n_osgb\nneodc.sentinel_ard.data.sentinel_2.2023.11.20.S2A_20231120_latn519lonw0037_T30UVC_ORB037_20231120132420_utm30n_osgb\nneodc.sentinel_ard.data.sentinel_2.2023.11.20.S2A_20231120_latn519lonw0022_T30UWC_ORB037_20231120132420_utm30n_osgb\nneodc.sentinel_ard.data.sentinel_2.2023.11.20.S2A_20231120_latn518lonw0008_T30UXC_ORB037_20231120132420_utm30n_osgb\nneodc.sentinel_ard.data.sentinel_2.2023.11.20.S2A_20231120_latn510lonw0036_T30UVB_ORB037_20231120132420_utm30n_osgb\nneodc.sentinel_ard.data.sentinel_2.2023.11.18.S2B_20231118_latn554lonw0053_T30UUG_ORB080_20231118122250_utm30n_osgb\nneodc.sentinel_ard.data.sentinel_2.2023.11.17.S2A_20231117_latn527lonw0007_T30UXD_ORB137_20231117131218_utm30n_osgb\nneodc.sentinel_ard.data.sentinel_2.2023.11.17.S2A_20231117_latn519lone0023_T31UDT_ORB137_20231117131218_utm31n_osgb\nneodc.sentinel_ard.data.sentinel_2.2023.11.17.S2A_20231117_latn509lone0009_T31UCS_ORB137_20231117131218_utm31n_osgb\nTEMPORAL EXTENT:  ['2023-01-01 11:14:51+00:00', '2023-11-01 11:43:49+00:00']\n\n\n\n# find some imagery\nitem_search = client.search(\n    collections=['sentinel2_ard'],\n    catalog_paths=[\"supported-datasets/ceda-stac-fastapi\"],\n    query=[\n        'start_datetime&gt;=2023-11-01',\n        'end_datetime&lt;=2023-12-28', \n    ],\n    limit=10,\n)\n\nfor item in item_search:\n    print(item.properties[\"start_datetime\"], item.properties[\"end_datetime\"])\n\n2023-11-21T11:43:49+00:00 2023-11-21T11:43:49+00:00\n2023-11-20T11:23:51+00:00 2023-11-20T11:23:51+00:00\n2023-11-20T11:23:51+00:00 2023-11-20T11:23:51+00:00\n2023-11-20T11:23:51+00:00 2023-11-20T11:23:51+00:00\n2023-11-20T11:23:51+00:00 2023-11-20T11:23:51+00:00\n2023-11-20T11:23:51+00:00 2023-11-20T11:23:51+00:00\n2023-11-20T11:23:51+00:00 2023-11-20T11:23:51+00:00\n2023-11-20T11:23:51+00:00 2023-11-20T11:23:51+00:00\n2023-11-20T11:23:51+00:00 2023-11-20T11:23:51+00:00\n2023-11-20T11:23:51+00:00 2023-11-20T11:23:51+00:00\n2023-11-18T11:33:19+00:00 2023-11-18T11:33:19+00:00\n2023-11-17T11:13:31+00:00 2023-11-17T11:13:31+00:00\n2023-11-17T11:13:31+00:00 2023-11-17T11:13:31+00:00\n2023-11-17T11:13:31+00:00 2023-11-17T11:13:31+00:00\n\n\n\nfrom shapely import Point\npoint = Point(-1.3144835766058023, 51.57555380377267) # Atlas building at RAL\n\n\npoint2 = Point(-0.683261054299237, 52.672193937442586)\n\n# Step 2: Re-project to a projected CRS (e.g., EPSG:3857 - Web Mercator)\n#gdf_projected = gdf.to_crs(epsg=3857)  # Re-project to a suitable projected CRS\n\n# Step 3: Calculate the centroid of the geometry in the projected CRS\n#centroid_projected = gdf_projected.geometry.centroid\n\n# Step 4: Optionally, re-project the centroid back to the original geographic CRS\n#point2 = centroid_projected.to_crs(epsg=4326)\nprint(point, point2)\n# Step 2: Calculate the centroid of the geometry\n#centroid = gdf.geometry.centroid\n\n# Step 3: Convert the centroid to a Shapely Point\n#point = centroid.iloc[0]  \n#point = Point(centroid_point)\n#print(centroid_point, point)\n\nitems = client.search(\n    collections=['sentinel2_ard'],\n    catalog_paths=[\"supported-datasets/ceda-stac-fastapi\"],\n    intersects=point2,\n    query=[\n        'start_datetime&gt;=2023-11-01',\n        'end_datetime&lt;=2023-12-28', \n        'Cloud Coverage Assessment&lt;=50.0'\n    ],\n    limit=10,\n)\n\nitems.total_count\n\nPOINT (-1.3144835766058023 51.57555380377267) POINT (-0.683261054299237 52.672193937442586)\n\n\n2\n\n\n\n# take the second record\na = items[1].to_dict()\nprint(a.keys())\n\ndict_keys(['type', 'stac_version', 'id', 'properties', 'geometry', 'links', 'assets', 'bbox', 'stac_extensions', 'collection'])\n\n\n\nfor key in (a['assets']):\n    print(key)\n\ncloud\ncloud_probability\ncog\nmetadata\nsaturated_pixels\nthumbnail\ntopographic_shadow\nvalid_pixels\n\n\n\nfor key, value in items[1].assets.items():\n    print(key, value.href)\n\ncloud https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/11/17/S2A_20231117_latn527lonw0007_T30UXD_ORB137_20231117131218_utm30n_osgb_clouds.tif\ncloud_probability https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/11/17/S2A_20231117_latn527lonw0007_T30UXD_ORB137_20231117131218_utm30n_osgb_clouds_prob.tif\ncog https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/11/17/S2A_20231117_latn527lonw0007_T30UXD_ORB137_20231117131218_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref.tif\nmetadata https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/11/17/S2A_20231117_latn527lonw0007_T30UXD_ORB137_20231117131218_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_meta.xml\nsaturated_pixels https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/11/17/S2A_20231117_latn527lonw0007_T30UXD_ORB137_20231117131218_utm30n_osgb_sat.tif\nthumbnail https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/11/17/S2A_20231117_latn527lonw0007_T30UXD_ORB137_20231117131218_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_thumbnail.jpg\ntopographic_shadow https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/11/17/S2A_20231117_latn527lonw0007_T30UXD_ORB137_20231117131218_utm30n_osgb_toposhad.tif\nvalid_pixels https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/11/17/S2A_20231117_latn527lonw0007_T30UXD_ORB137_20231117131218_utm30n_osgb_valid.tif\n\n\n\nasset_dict = items[1].assets\n\n# Get the url as a string\nthumbnail_assets = [v for k, v in asset_dict.items() if 'thumbnail' in k]\nthumbnail_url = thumbnail_assets[0].href\nthumbnail_url\n\n'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/11/17/S2A_20231117_latn527lonw0007_T30UXD_ORB137_20231117131218_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_thumbnail.jpg'\n\n\n\n#thumbnail_url = \"https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/11/17/S2A_20231117_latn527lonw0007_T30UXD_ORB137_20231117131218_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_thumbnail.jpg\"\n\n\nimport urllib.request\nfrom io import BytesIO \n\nwith urllib.request.urlopen(thumbnail_url) as url:\n    img = Image.open(BytesIO(url.read()))\n\ndisplay(img)\n\n\n\n\n\n\n\n\n\n\nEODH: it’s mass compute\nwhat are workflows There’s also a QGIS plugin\n\n# connect to the Workflow Runner\n\nimport pyeodh\n\nfrom requests import HTTPError\nimport os\n#client = pyeodh.Client(base_url=\"https://test.eodatahub.org.uk\") \n\n\n#import pyeodh\nwith open('secrets2.txt', 'r') as file:\n    lines = file.readlines()\n    username = lines[0].strip().split('=')[1].strip('\"')\n    token = lines[1].strip().split('=')[1].strip('\"')\n\n\n#username = os.getenv(\"ADES_USER\")\n#token = os.getenv(\"ADES_TOKEN\")\n#s3_token = os.getenv(\"ADES_S3_TOKEN\")\n\nclient = pyeodh.Client(username=username, token=token, s3_token=token)\nades = client.get_ades()\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[87], line 8\n      5 s3_token = os.getenv(\"ADES_S3_TOKEN\")\n      7 client = pyeodh.Client(username=username, token=token, s3_token=s3_token)\n----&gt; 8 ades = client.get_ades()\n\nFile ~/miniforge3/envs/eodh/lib/python3.12/site-packages/pyeodh/client.py:131, in Client.get_ades(self)\n    123 \"\"\"Initializes the workflow execution service (ADES) client.\n    124 \n    125 Calls: GET /ades/ogc-api\n   (...)\n    128     Ades: Object representing the ADES.\n    129 \"\"\"\n    130 if self.username is None or self.token is None:\n--&gt; 131     raise ValueError(\n    132         \"Valid username and token required for accessing protected API \"\n    133         \"endpoints.\"\n    134     )\n    135 # headers, data = self._request_json(\"GET\", f\"/ades/{self.username}/ogc-api/\")\n    136 \n    137 # * TEMP\n    138 # * ADES root endpoint is not available ATM\n    140 headers = Headers()\n\nValueError: Valid username and token required for accessing protected API endpoints.\n\n\n\n\n# Workflows\n\nwith open('secrets.txt', 'r') as file:\n    lines = file.readlines()\n    username = lines[0].strip().split('=')[1].strip('\"')\n    password = lines[1].strip().split('=')[1].strip('\"')\n\nclient = pyeodh.Client(auth=(username, password))\nwfr = client.get_ades()\n\n\n# Choose and parameterise a workflow\n\n\n# Run the workflow\n\n\n# Find the outputs\n\n\n\nEODH: it’s data analysis\nNotebook service can be used with pyeodh and other libraries installed using pip to analyse data and outputs\n\n# Create a data cube?\n\nFollowing https://odc-stac.readthedocs.io/en/latest/notebooks/stac-load-e84-aws.html\nREWORK TO USE EODH IF POSSIBLE\n\nimport dask.distributed\nimport folium\n#import folium.plugins # Not sure what this does\nimport geopandas as gpd\nimport shapely.geometry\nfrom IPython.display import display\nfrom pystac_client import Client\n\nfrom odc.stac import configure_rio, stac_load # the data cube bit\n\n\ndef convert_bounds(bbox, invert_y=False):\n    \"\"\"\n    Helper method for changing bounding box representation to leaflet notation\n\n    ``(lon1, lat1, lon2, lat2) -&gt; ((lat1, lon1), (lat2, lon2))``\n    \"\"\"\n    x1, y1, x2, y2 = bbox\n    if invert_y:\n        y1, y2 = y2, y1\n    return ((y1, x1), (y2, x2))\n\n\n# FIND STAC ITEMS\n\n#km2deg = 1.0 / 111\n#x, y = (113.887, -25.843)  # Center point of a query\n#r = 100 * km2deg\n#bbox = (x - r, y - r, x + r, y + r)\n\nurl = \"https://api.stac.ceda.ac.uk/\"\n\n#catalog = Client.open(\"https://earth-search.aws.element84.com/v1/\")\nclient = Client.open(url)\nfor coll in client.get_collections():\n    print(f\"{coll.id}: {coll.description}\")\n\ncmip6: CMIP6\ncordex: CORDEX\nsentinel1: Sentinel 1\nsentinel2_ard: sentinel 2 ARD\nsst-cdrv3-collection: collection of EOCIS SST CDR V3\nukcp: UKCP\n\n\n\nsentinel2_ard = client.get_collection('sentinel2_ard')\n\nsentinel2_ard.get_items()\n\n# check the spatial and temporal extent of the collection\n\nprint(\"spatial extent:\", sentinel2_ard.extent.spatial.bboxes)\nprint(\"data range:\", [str(d) for d in sentinel2_ard.extent.temporal.intervals[0]])\n\n\n\n#items = list(query.items())\n#print(f\"Found: {len(items):d} datasets\")\n\n# Convert STAC items into a GeoJSON FeatureCollection\n#stac_json = query.item_collection_as_dict()\n\nspatial extent: [[-9.00034454651177, 49.48562028352171, 3.1494256015866995, 61.33444247301668]]\ndata range: ['2023-01-01 11:14:51+00:00', '2023-11-01 11:43:49+00:00']\n\n\n\n# SEARCH\nitem_search = client.search(\n    collections=['sentinel2_ard'],\n    query=[\n        'start_datetime&gt;=2023-01-01',\n        'end_datetime&lt;=2023-02-28', \n    ],\n    max_items=100,\n)\n\n\nitems = list(item_search.items())\nlen(items)\n\n100\n\n\n\nfrom shapely import Point\npoint = Point(-1.3144835766058023, 51.57555380377267) # Atlas building at RAL\n\nitem_search = client.search(\n    collections=['sentinel2_ard'],\n    intersects=point,\n    query=[\n        'start_datetime&gt;=2023-01-01',\n        'end_datetime&lt;=2023-02-28', \n      ],\n    max_items=10,\n)\n\nitems = list(item_search.items())\nitems\n\n[&lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.25.S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.23.S2A_20230223_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.20.S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.15.S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.13.S2A_20230213_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.08.S2B_20230208_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.31.S2A_20230131_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.24.S2A_20230124_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.21.S2A_20230121_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.19.S2B_20230119_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;]\n\n\n\nitems[0].to_dict()\n\n{'type': 'Feature',\n 'stac_version': '1.0.0',\n 'id': 'neodc.sentinel_ard.data.sentinel_2.2023.02.25.S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb',\n 'properties': {'file_count': 7,\n  'start_datetime': '2023-02-25T11:09:39Z',\n  'end_datetime': '2023-02-25T11:09:39Z',\n  'NSSDC Identifier': '2015-000A',\n  'created': '2024-02-07T11:36:30.012295Z',\n  'Instrument Family Name': 'Multi-Spectral Instrument',\n  'Platform Number': '2B',\n  'Datatake Type': 'INS-NOBS',\n  'esa_file_name': 'S2B_MSIL1C_20230225T110939_N0509_R137_T30UXC_20230225T115203',\n  'Ground Tracking Direction': 'descending',\n  'datetime': '2023-02-25T11:09:39Z',\n  'instance_id': 'neodc.sentinel_ard.data.sentinel_2.2023.02.25.S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb',\n  'size': 1949488461,\n  'Product Type': 'S2MSI1C',\n  'Instrument Family Name Abbreviation': 'MSI',\n  'Start Orbit Number': '031194',\n  'eo:cloud_cover': '74.4384424736481',\n  'Start Relative Orbit Number': '137',\n  'updated': '2024-02-07T11:36:30.012295Z',\n  'Instrument Mode': None,\n  'EPSG': '27700'},\n 'geometry': {'coordinates': [[[-1.5321045, 52.34135509726958],\n    [0.077757925309447, 52.31036691499413],\n    [0.011254122594852, 51.32452335478603],\n    [-1.5638733, 51.354439390266904],\n    [-1.5321045, 52.34135509726958]]],\n  'type': 'Polygon'},\n 'links': [{'rel': 'self',\n   'href': 'https://api.stac.ceda.ac.uk/collections/sentinel2_ard/items/neodc.sentinel_ard.data.sentinel_2.2023.02.25.S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb',\n   'type': 'application/geo+json'},\n  {'rel': 'parent',\n   'href': 'https://api.stac.ceda.ac.uk/collections/sentinel2_ard',\n   'type': 'application/json'},\n  {'rel': 'collection',\n   'href': 'https://api.stac.ceda.ac.uk/collections/sentinel2_ard',\n   'type': 'application/json'},\n  {'rel': 'root',\n   'href': 'https://api.stac.ceda.ac.uk/',\n   'type': 'application/json',\n   'title': 'stac-fastapi-elasticsearch'}],\n 'assets': {'cloud': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_clouds.tif',\n   'size': 1900764,\n   'location': 'on_disk',\n   'roles': ['data']},\n  'metadata': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_meta.xml',\n   'size': 18360,\n   'location': 'on_disk',\n   'roles': ['metadata']},\n  'thumbnail': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_thumbnail.jpg',\n   'size': 85207,\n   'location': 'on_disk',\n   'roles': ['thumbnail']},\n  'topographic_shadow': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_toposhad.tif',\n   'size': 250612,\n   'location': 'on_disk',\n   'roles': ['data']},\n  'cog': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref.tif',\n   'size': 1945239489,\n   'eo:bands': [{'full_width_half_max': 0.07,\n     'central_wavelength': 492.1,\n     'name': 'B02',\n     'description': 'Blue',\n     'common_name': 'blue'},\n    {'full_width_half_max': 0.04,\n     'central_wavelength': 559,\n     'name': 'B03',\n     'description': 'Green',\n     'common_name': 'green'},\n    {'full_width_half_max': 0.03,\n     'central_wavelength': 665,\n     'name': 'B04',\n     'description': 'Red',\n     'common_name': 'red'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 703.8,\n     'name': 'B05',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'rededge'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 739.1,\n     'name': 'B06',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'rededge'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 779.7,\n     'name': 'B07',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'rededge'},\n    {'full_width_half_max': 0.11,\n     'central_wavelength': 833,\n     'name': 'B08',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'nir'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 864,\n     'name': 'B08a',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'nir08'},\n    {'full_width_half_max': 0.09,\n     'central_wavelength': 1610.4,\n     'name': 'B11',\n     'description': 'Short Wave Infrared',\n     'common_name': 'swir16'},\n    {'full_width_half_max': 0.19,\n     'central_wavelength': 2185.7,\n     'name': 'B12',\n     'description': 'Short Wave Infrared',\n     'common_name': 'swir22'}],\n   'location': 'on_disk',\n   'roles': ['data']},\n  'valid_pixels': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_valid.tif',\n   'size': 288670,\n   'location': 'on_disk',\n   'roles': ['data']},\n  'saturated_pixels': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_sat.tif',\n   'size': 1705359,\n   'location': 'on_disk',\n   'roles': ['data']}},\n 'bbox': [-1.5638733, 51.32452335478603, 0.077757925309447, 52.34135509726958],\n 'stac_extensions': ['https://stac-extensions.github.io/eo/v1.1.0/schema.json'],\n 'collection': 'sentinel2_ard'}\n\n\n\nitem_search = client.search(\n    collections=['sentinel2_ard'],\n    intersects=point,\n    query=[\n        'start_datetime&gt;=2023-01-01',\n        'end_datetime&lt;=2023-02-28', \n        'eo:cloud_cover&lt;=50.0'\n      ],\n    max_items=10,\n)\n\nitems = list(item_search.items())\nitems\n\n[&lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.20.S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.15.S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.13.S2A_20230213_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.08.S2B_20230208_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.31.S2A_20230131_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.24.S2A_20230124_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.21.S2A_20230121_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.19.S2B_20230119_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.11.S2A_20230111_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.09.S2B_20230109_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;]\n\n\n\nitems[0].to_dict()\n\n{'type': 'Feature',\n 'stac_version': '1.0.0',\n 'id': 'neodc.sentinel_ard.data.sentinel_2.2023.02.20.S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb',\n 'properties': {'file_count': 7,\n  'start_datetime': '2023-02-20T11:11:01Z',\n  'end_datetime': '2023-02-20T11:11:01Z',\n  'NSSDC Identifier': '2015-000A',\n  'created': '2024-02-07T11:34:51.269363Z',\n  'Instrument Family Name': 'Multi-Spectral Instrument',\n  'Platform Number': '2A',\n  'Datatake Type': 'INS-NOBS',\n  'esa_file_name': 'S2A_MSIL1C_20230220T111101_N0509_R137_T30UXC_20230220T131022',\n  'Ground Tracking Direction': 'descending',\n  'datetime': '2023-02-20T11:11:01Z',\n  'instance_id': 'neodc.sentinel_ard.data.sentinel_2.2023.02.20.S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb',\n  'size': 2086211720,\n  'Product Type': 'S2MSI1C',\n  'Instrument Family Name Abbreviation': 'MSI',\n  'Start Orbit Number': '040031',\n  'eo:cloud_cover': '26.2055898951895',\n  'Start Relative Orbit Number': '137',\n  'updated': '2024-02-07T11:34:51.269363Z',\n  'Instrument Mode': None,\n  'EPSG': '27700'},\n 'geometry': {'coordinates': [[[-1.5321045, 52.34135509726958],\n    [0.077757925309447, 52.31036691499413],\n    [0.011254122594852, 51.32452335478603],\n    [-1.5638733, 51.354439390266904],\n    [-1.5321045, 52.34135509726958]]],\n  'type': 'Polygon'},\n 'links': [{'rel': 'self',\n   'href': 'https://api.stac.ceda.ac.uk/collections/sentinel2_ard/items/neodc.sentinel_ard.data.sentinel_2.2023.02.20.S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb',\n   'type': 'application/geo+json'},\n  {'rel': 'parent',\n   'href': 'https://api.stac.ceda.ac.uk/collections/sentinel2_ard',\n   'type': 'application/json'},\n  {'rel': 'collection',\n   'href': 'https://api.stac.ceda.ac.uk/collections/sentinel2_ard',\n   'type': 'application/json'},\n  {'rel': 'root',\n   'href': 'https://api.stac.ceda.ac.uk/',\n   'type': 'application/json',\n   'title': 'stac-fastapi-elasticsearch'}],\n 'assets': {'cloud': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_clouds.tif',\n   'size': 3144692,\n   'location': 'on_disk',\n   'roles': ['data']},\n  'metadata': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_meta.xml',\n   'size': 18363,\n   'location': 'on_disk',\n   'roles': ['metadata']},\n  'thumbnail': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_thumbnail.jpg',\n   'size': 118722,\n   'location': 'on_disk',\n   'roles': ['thumbnail']},\n  'topographic_shadow': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_toposhad.tif',\n   'size': 262653,\n   'location': 'on_disk',\n   'roles': ['data']},\n  'cog': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref.tif',\n   'size': 2080673323,\n   'eo:bands': [{'full_width_half_max': 0.07,\n     'central_wavelength': 496.6,\n     'name': 'B02',\n     'description': 'Blue',\n     'common_name': 'blue'},\n    {'full_width_half_max': 0.04,\n     'central_wavelength': 560,\n     'name': 'B03',\n     'description': 'Green',\n     'common_name': 'green'},\n    {'full_width_half_max': 0.03,\n     'central_wavelength': 664.5,\n     'name': 'B04',\n     'description': 'Red',\n     'common_name': 'red'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 703.9,\n     'name': 'B05',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'rededge'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 740.2,\n     'name': 'B06',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'rededge'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 782.5,\n     'name': 'B07',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'rededge'},\n    {'full_width_half_max': 0.11,\n     'central_wavelength': 835.1,\n     'name': 'B08',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'nir'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 864.8,\n     'name': 'B08a',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'nir08'},\n    {'full_width_half_max': 0.09,\n     'central_wavelength': 1613.7,\n     'name': 'B11',\n     'description': 'Short Wave Infrared',\n     'common_name': 'swir16'},\n    {'full_width_half_max': 0.18,\n     'central_wavelength': 2202.4,\n     'name': 'B12',\n     'description': 'Short Wave Infrared',\n     'common_name': 'swir22'}],\n   'location': 'on_disk',\n   'roles': ['data']},\n  'valid_pixels': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_valid.tif',\n   'size': 288608,\n   'location': 'on_disk',\n   'roles': ['data']},\n  'saturated_pixels': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_sat.tif',\n   'size': 1705359,\n   'location': 'on_disk',\n   'roles': ['data']}},\n 'bbox': [-1.5638733, 51.32452335478603, 0.077757925309447, 52.34135509726958],\n 'stac_extensions': ['https://stac-extensions.github.io/eo/v1.1.0/schema.json'],\n 'collection': 'sentinel2_ard'}\n\n\n\nfor key, value in items[1].assets.items():\n    print(key, value.href)\n\ncloud https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_clouds.tif\nmetadata https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_meta.xml\nthumbnail https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_thumbnail.jpg\ntopographic_shadow https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_toposhad.tif\ncog https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref.tif\nvalid_pixels https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_valid.tif\nsaturated_pixels https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_sat.tif\n\n\n\nitems\n\n[&lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.20.S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.15.S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.13.S2A_20230213_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.08.S2B_20230208_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.31.S2A_20230131_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.24.S2A_20230124_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.21.S2A_20230121_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.19.S2B_20230119_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.11.S2A_20230111_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.09.S2B_20230109_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;]\n\n\n\n# SET UP DASK CLIENT\n\nclient = dask.distributed.Client()\nconfigure_rio(cloud_defaults=True, aws={\"aws_unsigned\": True}, client=client) # sets up gdal for cloud use\ndisplay(client)\n\n/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/distributed/node.py:182: UserWarning: Port 8787 is already in use.\nPerhaps you already have a cluster running?\nHosting the HTTP server on port 36089 instead\n  warnings.warn(\n\n\n\n     \n    \n        Client\n        Client-18464180-69fc-11ef-adda-f40669402fbd\n        \n\n\n\nConnection method: Cluster object\nCluster type: distributed.LocalCluster\n\n\nDashboard: http://127.0.0.1:36089/status\n\n\n\n\n\n\n        \n\n        \n            \n            Cluster Info\n            \n    \n    \n    \n        LocalCluster\n        ebba7415\n        \n\n\n\nDashboard: http://127.0.0.1:36089/status\nWorkers: 4\n\n\nTotal threads: 4\nTotal memory: 15.48 GiB\n\n\nStatus: running\nUsing processes: True\n\n\n\n\n\n        \n            \n                Scheduler Info\n            \n\n            \n    \n         \n        \n            Scheduler\n            Scheduler-cc47dd57-ce18-4acc-8b44-2cfe14ee1b6d\n            \n\n\n\nComm: tcp://127.0.0.1:43071\nWorkers: 4\n\n\nDashboard: http://127.0.0.1:36089/status\nTotal threads: 4\n\n\nStarted: Just now\nTotal memory: 15.48 GiB\n\n\n\n\n        \n    \n\n    \n        \n            Workers\n        \n\n        \n        \n             \n            \n            \n                \n                    Worker: 0\n                \n                \n\n\n\nComm: tcp://127.0.0.1:37851\nTotal threads: 1\n\n\nDashboard: http://127.0.0.1:45891/status\nMemory: 3.87 GiB\n\n\nNanny: tcp://127.0.0.1:44451\n\n\n\nLocal directory: /tmp/dask-scratch-space/worker-07pluzp_\n\n\n\n\n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 1\n                \n                \n\n\n\nComm: tcp://127.0.0.1:44127\nTotal threads: 1\n\n\nDashboard: http://127.0.0.1:38617/status\nMemory: 3.87 GiB\n\n\nNanny: tcp://127.0.0.1:46581\n\n\n\nLocal directory: /tmp/dask-scratch-space/worker-j1euk6hp\n\n\n\n\n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 2\n                \n                \n\n\n\nComm: tcp://127.0.0.1:35695\nTotal threads: 1\n\n\nDashboard: http://127.0.0.1:43975/status\nMemory: 3.87 GiB\n\n\nNanny: tcp://127.0.0.1:46341\n\n\n\nLocal directory: /tmp/dask-scratch-space/worker-guemqotg\n\n\n\n\n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 3\n                \n                \n\n\n\nComm: tcp://127.0.0.1:45491\nTotal threads: 1\n\n\nDashboard: http://127.0.0.1:40249/status\nMemory: 3.87 GiB\n\n\nNanny: tcp://127.0.0.1:45605\n\n\n\nLocal directory: /tmp/dask-scratch-space/worker-_dnsv6m3\n\n\n\n\n            \n            \n        \n        \n\n    \n\n\n        \n    \n\n            \n        \n\n    \n\n\n\n\nprint(f\"Found: {len(items):d} datasets\")\n\n# Convert STAC items into a GeoJSON FeatureCollection\nstac_json = item_search.item_collection_as_dict()\n\nFound: 10 datasets\n\n\n\n# REVIEW SEARCH RESULTS\n\ngdf = gpd.GeoDataFrame.from_features(stac_json, \"epsg:4326\")\n\n# Compute granule id from components\n#gdf[\"granule\"] = (\n#    gdf[\"esa_file_name\"].apply(lambda x: f\"{x:02d}\")\n#    + gdf[\"mgrs:latitude_band\"]\n#    + gdf[\"mgrs:grid_square\"]\n#)\n\nfig = gdf.plot(\n    \"esa_file_name\",\n    edgecolor=\"black\",\n    categorical=True,\n    aspect=\"equal\",\n    alpha=0.5,\n    figsize=(6, 12),\n    legend=True,\n    legend_kwds={\"loc\": \"upper left\", \"frameon\": False, \"ncol\": 1},\n)\n_ = fig.set_title(\"STAC Query Results\")\n\n\n\n\n\n\n\n\n\n# PLOT THE SAME, but using FOLIUM\n\n# https://github.com/python-visualization/folium/issues/1501\n#from branca.element import Figure\n\nimport folium\nf = folium.Figure(width=600, height=400)\nm = folium.Map(location=[52, 2], zoom_start=5).add_to(f)\n\n\n\n\n\n#fig = Figure(width=\"400px\", height=\"500px\")\n#map1 = folium.Map()\n#fig.add_child(map1)\n\n#folium.GeoJson(\n#    shapely.geometry.box(*bbox),\n#    style_function=lambda x: dict(fill=False, weight=1, opacity=0.7, color=\"olive\"),\n#    name=\"Query\",\n#).add_to(m)\n\n\ngdf.explore(\n    \"esa_file_name\",\n    categorical=True,\n    tooltip=[\n        \"esa_file_name\",\n#        \"datetime\",\n#        \"eo:cloud_cover\",\n    ],\n    popup=False,\n#    style_kwds=dict(fillOpacity=0.1, width=2),\n    name=\"STAC\",\n    m=m,\n)\n\n#map1.fit_bounds(bounds=convert_bounds(gdf.unary_union.bounds))\n#display(fig)\n\n\n\n\n\n# CONSTRUCT DASK DATASET\n# Note: there are 9 STAC Items on input, and only one timeslice on output. \n# Due to groupby=\"solar_day\" (all items that occured on the same day added to one image plane).\n\n# Since we will plot it on a map we need to use `EPSG:3857` projection\ncrs = \"epsg:3857\"\nzoom = 2**5  # overview level 5\n\n#xx = stac_load(\n#    items,\n#    bands=(\"B04\", \"B03\", \"B02\"),\n#    crs=crs,\n#    resolution=10 * zoom)#,\n#    chunks={},  # &lt;-- use Dask\n#    groupby=\"solar_day\",\n#)\n#display(xx)\n\n\n#xx = stac_load(\n#    items,\n#    chunks={\"x\": 2048, \"y\": 2048},\n#    patch_url=pc.sign,\n#    resolution=resolution,\n#    # force dtype and nodata\n#    dtype=\"uint16\",\n#    nodata=0,\n#)\n\nxx = stac_load(\n    items,\n    crs=crs,\n    resolution=10 * zoom,\n    chunks={\"x\": 2048, \"y\": 2048},  # &lt;-- use Dask\n)\n\nprint(f\"Bands: {','.join(list(xx.data_vars))}\")\ndisplay(xx)\n\nBands: cloud,thumbnail,topographic_shadow,cog,valid_pixels,saturated_pixels\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 79MB\nDimensions:             (y: 574, x: 573, time: 10)\nCoordinates:\n  * y                   (y) float64 5kB 6.862e+06 6.862e+06 ... 6.679e+06\n  * x                   (x) float64 5kB -1.742e+05 -1.739e+05 ... 8.8e+03\n    spatial_ref         int32 4B 3857\n  * time                (time) datetime64[ns] 80B 2023-01-09T11:23:39 ... 202...\nData variables:\n    cloud               (time, y, x) float32 13MB dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n    thumbnail           (time, y, x) float32 13MB dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n    topographic_shadow  (time, y, x) float32 13MB dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n    cog                 (time, y, x) float32 13MB dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n    valid_pixels        (time, y, x) float32 13MB dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n    saturated_pixels    (time, y, x) float32 13MB dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;xarray.DatasetDimensions:y: 574x: 573time: 10Coordinates: (4)y(y)float646.862e+06 6.862e+06 ... 6.679e+06units :metreresolution :-320.0crs :EPSG:3857array([6862240., 6861920., 6861600., ..., 6679520., 6679200., 6678880.])x(x)float64-1.742e+05 -1.739e+05 ... 8.8e+03units :metreresolution :320.0crs :EPSG:3857array([-174240., -173920., -173600., ...,    8160.,    8480.,    8800.])spatial_ref()int323857spatial_ref :PROJCRS[\"WGS 84 / Pseudo-Mercator\",BASEGEOGCRS[\"WGS 84\",ENSEMBLE[\"World Geodetic System 1984 ensemble\",MEMBER[\"World Geodetic System 1984 (Transit)\"],MEMBER[\"World Geodetic System 1984 (G730)\"],MEMBER[\"World Geodetic System 1984 (G873)\"],MEMBER[\"World Geodetic System 1984 (G1150)\"],MEMBER[\"World Geodetic System 1984 (G1674)\"],MEMBER[\"World Geodetic System 1984 (G1762)\"],MEMBER[\"World Geodetic System 1984 (G2139)\"],MEMBER[\"World Geodetic System 1984 (G2296)\"],ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]],ENSEMBLEACCURACY[2.0]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"Popular Visualisation Pseudo-Mercator\",METHOD[\"Popular Visualisation Pseudo Mercator\",ID[\"EPSG\",1024]],PARAMETER[\"Latitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"easting (X)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"northing (Y)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Web mapping and visualisation.\"],AREA[\"World between 85.06°S and 85.06°N.\"],BBOX[-85.06,-180,85.06,180]],ID[\"EPSG\",3857]]crs_wkt :PROJCRS[\"WGS 84 / Pseudo-Mercator\",BASEGEOGCRS[\"WGS 84\",ENSEMBLE[\"World Geodetic System 1984 ensemble\",MEMBER[\"World Geodetic System 1984 (Transit)\"],MEMBER[\"World Geodetic System 1984 (G730)\"],MEMBER[\"World Geodetic System 1984 (G873)\"],MEMBER[\"World Geodetic System 1984 (G1150)\"],MEMBER[\"World Geodetic System 1984 (G1674)\"],MEMBER[\"World Geodetic System 1984 (G1762)\"],MEMBER[\"World Geodetic System 1984 (G2139)\"],MEMBER[\"World Geodetic System 1984 (G2296)\"],ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]],ENSEMBLEACCURACY[2.0]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"Popular Visualisation Pseudo-Mercator\",METHOD[\"Popular Visualisation Pseudo Mercator\",ID[\"EPSG\",1024]],PARAMETER[\"Latitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"easting (X)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"northing (Y)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Web mapping and visualisation.\"],AREA[\"World between 85.06°S and 85.06°N.\"],BBOX[-85.06,-180,85.06,180]],ID[\"EPSG\",3857]]GeoTransform :-174400 320 0 6862400 0 -320array(3857, dtype=int32)time(time)datetime64[ns]2023-01-09T11:23:39 ... 2023-02-...array(['2023-01-09T11:23:39.000000000', '2023-01-11T11:14:31.000000000',\n       '2023-01-19T11:23:09.000000000', '2023-01-21T11:13:51.000000000',\n       '2023-01-24T11:23:41.000000000', '2023-01-31T11:13:11.000000000',\n       '2023-02-08T11:21:29.000000000', '2023-02-13T11:21:51.000000000',\n       '2023-02-15T11:10:49.000000000', '2023-02-20T11:11:01.000000000'],\n      dtype='datetime64[ns]')Data variables: (6)cloud(time, y, x)float32dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n12.55 MiB\n1.25 MiB\n\n\nShape\n(10, 574, 573)\n(1, 574, 573)\n\n\nDask graph\n10 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                           573 574 10\n\n\n\n\nthumbnail(time, y, x)float32dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n12.55 MiB\n1.25 MiB\n\n\nShape\n(10, 574, 573)\n(1, 574, 573)\n\n\nDask graph\n10 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                           573 574 10\n\n\n\n\ntopographic_shadow(time, y, x)float32dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n12.55 MiB\n1.25 MiB\n\n\nShape\n(10, 574, 573)\n(1, 574, 573)\n\n\nDask graph\n10 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                           573 574 10\n\n\n\n\ncog(time, y, x)float32dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n12.55 MiB\n1.25 MiB\n\n\nShape\n(10, 574, 573)\n(1, 574, 573)\n\n\nDask graph\n10 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                           573 574 10\n\n\n\n\nvalid_pixels(time, y, x)float32dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n12.55 MiB\n1.25 MiB\n\n\nShape\n(10, 574, 573)\n(1, 574, 573)\n\n\nDask graph\n10 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                           573 574 10\n\n\n\n\nsaturated_pixels(time, y, x)float32dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n12.55 MiB\n1.25 MiB\n\n\nShape\n(10, 574, 573)\n(1, 574, 573)\n\n\nDask graph\n10 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                           573 574 10\n\n\n\n\nIndexes: (3)yPandasIndexPandasIndex(Index([6862240.0, 6861920.0, 6861600.0, 6861280.0, 6860960.0, 6860640.0,\n       6860320.0, 6860000.0, 6859680.0, 6859360.0,\n       ...\n       6681760.0, 6681440.0, 6681120.0, 6680800.0, 6680480.0, 6680160.0,\n       6679840.0, 6679520.0, 6679200.0, 6678880.0],\n      dtype='float64', name='y', length=574))xPandasIndexPandasIndex(Index([-174240.0, -173920.0, -173600.0, -173280.0, -172960.0, -172640.0,\n       -172320.0, -172000.0, -171680.0, -171360.0,\n       ...\n          5920.0,    6240.0,    6560.0,    6880.0,    7200.0,    7520.0,\n          7840.0,    8160.0,    8480.0,    8800.0],\n      dtype='float64', name='x', length=573))timePandasIndexPandasIndex(DatetimeIndex(['2023-01-09 11:23:39', '2023-01-11 11:14:31',\n               '2023-01-19 11:23:09', '2023-01-21 11:13:51',\n               '2023-01-24 11:23:41', '2023-01-31 11:13:11',\n               '2023-02-08 11:21:29', '2023-02-13 11:21:51',\n               '2023-02-15 11:10:49', '2023-02-20 11:11:01'],\n              dtype='datetime64[ns]', name='time', freq=None))Attributes: (0)\n\n\n\n# DATA FOOTPRINT\n#xx.odc.geobox\n\n# TEST\nxx.data_vars[cog]\n\n\n%%time\nxx = xx.compute() # LOAD INTO LOCAL MEMORY",
    "crumbs": [
      "Presentations",
      "DEFRA 2024-09"
    ]
  },
  {
    "objectID": "website/about.html",
    "href": "website/about.html",
    "title": "About",
    "section": "",
    "text": "What is EODH\n\n\nResources on this website",
    "crumbs": [
      "About"
    ]
  }
]